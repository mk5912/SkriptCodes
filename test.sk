
options:
	lift_Radius: 2.5
	permMess: "You do not have the required permission to use this command!"
	perm: op

command /givePerm <player> <text>:
	usage: /givePerm <player> <permission>
	trigger:
		if sender is console:
			if {perm::%arg-2%::*} does not contain arg-1:
				add arg-1 to network variable {perm::%arg-2%::*}
				message "Gave %arg-1% the permission %arg-2%."
			else:
				message "Nothing changed. The player already has the permission %arg-2%."
		else:
			loop {perm::op::*}:
				if {perm::op::%loop-index%} is sender:
					if {perm::%arg-2%::*} does not contain arg-1:
						add arg-1 to network variable {perm::%arg-2%::*}
						message "Gave %arg-1% the permission %arg-2%."
					else:
						message "Nothing changed. The player already has the permission %arg-2%."
				else:
					message "You do not have permission to use that command."

on join:
	if network variable {perm::op::*} contains player:
		op player
	else:
		deop player

command /removePerm <player> <text>:
	usage: /removePerm <player> <permission>
	trigger:
		if sender is console:
			if {perm::%arg-2%::*} contains arg-1:
				remove arg-1 from network variable {perm::%arg-2%::*}
				message "Removed %arg-1% the permission %arg-2%."
			else:
				message "Nothing changed. The player does not have the permission %arg-2%."
		else:
			loop {perm::op::*}:
				if {perm::op::%loop-index%} is sender:
					if {perm::%arg-2%::*} contains arg-1:
						remove arg-1 from network variable {perm::%arg-2%::*}
						message "Removed %arg-1% the permission %arg-2%."
					else:
						message "Nothing changed. The player does not have the permission %arg-2%."
				else:
					message "You do not have permission to use that command."

command /test <text>:
	usage: /test <permission>
	trigger:
		if network variable {perm::%arg%::*} is not set:
			message "No one assigned that permission."
		else:
			if sender is console:
				message "Just testing!"
			else:
				set {_temp::*} to network variable {perm::%arg%::*}
				loop {_temp}:
					if {perm::%arg%::%loop-index%} is sender:
						message "Just testing!"
					else:
						message "No permission."

command /op <player>:
	permission: op
	trigger:
		if network variable {perm::op::*} does not contain arg:
			execute console command "/givePerm %arg% op"
			if network variable {perm::op::*} contains arg:
				op arg
				message "Made %arg% an opperator."
			else:
				message "Failed to set opperator permission."
		else:
			message "Nothing changed. The player already is an operator."

command /deop <player>:
	permission: op
	trigger:
		if network variable {perm::op::*} contains player:
			execute console command "/removePerm %arg% op"
			if network variable {perm::op::*} contains arg:
				message "Failed to remove opperator permission."
			else:
				deop arg
				message "Made %arg% no longer a server operator."
		else:
			message "Nothing changed. The player is not an operator."

command /permissions <player>:
	description: Displayes all the target player's permissions.
	usage: /permissions <player>
	permission: {@perm}
	permission message: {@permMess}
	trigger:
		message "%arg% has the following permissions:"
		loop all permissions of arg:
			message loop-value	

command /clearlifts:
	permission: {@perm}
	permission message: {@permMess}
	trigger:
		loop {lift::*}:
			clear {lift::%loop-index%}
			message "Cleared lift marked {lift::%loop-index%}!"

command /addlift <text>:
	permission: {@perm}
	permission message: {@permMess}
	usage: /addlift <base/top>
	executable by: players
	trigger:
		if arg is "base":
			set {liftA} to location (ceil(x-coordinate of player) - 0.5, floor( y-coordinate of player), ceil(z-coordinate of player) - 0.5)
			message "Lift base location aquired! <green>%{liftA}%<reset>"
		if arg is "top":
			set {liftB} to location (ceil(x-coordinate of player) - 0.5, floor( y-coordinate of player), ceil(z-coordinate of player) - 0.5)
			message "Lift top location aquired! <orange>%{liftB}%<reset>"
		if {liftA} is set:
			if {liftB} is set:
				if x-coordinate of {liftA} is x-coordinate of {liftB}:
					if z-coordinate of {liftA} is z-coordinate of {liftB}:
						loop distance between {liftA} and {liftB} times:
							set {xA} to x-coordinate of {liftA}
							set {yA} to y-coordinate of {liftA} + loop-number
							set {zA} to z-coordinate of {liftA}
							add location({xA}, {yA}, {zA}) to {lift::*}
					else:
						message "Lift placements not alligned!"
				else:
					message "Lift placements not alligned!"
				clear {liftA}
				clear {liftB}
				clear {xA}
				clear {yA}
				clear {zA}

every 6 ticks:
	loop all players:
		set {_player} to loop-player
		loop {lift::*}:
			if distance between {_player} and {lift::%loop-index%} is less than {@lift_Radius}:
				send "In lift area %loop-index%!" to {_player}
				wait 2 ticks
